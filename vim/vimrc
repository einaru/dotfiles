"
" Vim configuration file
"
" Author: Einar Uvsløkk <einar.uvslokk@gmail.com>
" Source: https://github.com/einaru/dotfiles
"
set nocompatible


" Vundle:

let $pluginsfile=expand('~/.vim/plugins.vim')
if filereadable($pluginsfile)
	source $pluginsfile
endif


" General Config:

syntax enable
set autochdir                " switch to current directory
set hidden                   " change buffers without saving
set noerrorbells             " disable noise
set novisualbell             " disable visual noise
set modeline                 " look for modelines in files
set modelines=10             " number of lines to look for modelines
set ruler                    " use statusline w/cursor position, etc.
set showmatch                " highlight matching braces
set matchtime=1              " how long the match is visible
set showcmd                  " display incomplete commands
set switchbuf=useopen        " switch to open buffer if it exists
set noautowrite              " never write a file unless requested
set noautowriteall           " ... NEVER!
set hlsearch                 " highlight matching search patterns
set lazyredraw               " don't redraw while executing macros
set number                   " display line numbers
set relativenumber           " display relative line numbers
set exrc                     " enable per-project configuration files
set secure                   " ... and disable unsafe commands
set mouse=a                  " enable mouse in (a)ll modes

" Swap and backup
if !has('nvim')
	let $cachedir=expand('~/.cache/vim')
	silent !mkdir -p $cachedir/backup >/dev/null 2>&1
	silent !mkdir -p $cachedir/swap >/dev/null 2>&1

	set nobackup                    " {en,dis}able backup
	set backupdir=$cachedir/backup  " location for backup files
	set directory=$cachedir/swap    " location for swap files
	set viminfo+=n$cachedir/viminfo " location for viminfo file

	let g:netrw_home=$cachedir
endif

" Scrolling
set scrolloff=3              " start scrolling n lines away from margins
set sidescrolloff=3
set sidescroll=1

" Indentation
set autoindent               " copy indent from current line
set smartindent              " … and be smart about it
set smarttab                 " smart <TAB> and <BS> behaviour
set tabstop=4                " number of spaces a <TAB> counts for
set shiftwidth=4             " number of spaces used for autoindent
set noexpandtab              " use tabs not spaces

" Display special characters visually
set lcs=tab:\|-,trail:~,nbsp:¬,precedes:<,extends:>
set linebreak
set nolist                   " don't show special characters as default

" Colors
set t_Co=256
set laststatus=2
set background=light

try
	colorscheme PaperColor
catch /^Vim\%((\a\+)\)\=:E185/
	colorscheme default
endtry

" Add a highlight group to look out for trailing whitespaces
hi TrailingWhitespace ctermbg=red guibg=red
hi IllegalWhitespace ctermbg=red guibg=red
augroup HighlightErrors
	au InsertEnter * match TrailingWhitespace /\s\+\%#\@<!$/
	au InsertLeave * match TrailingWhitespace /\s\+$/
	au BufWinEnter * match TrailingWhitespace /\s\+$/
	au InsertEnter,InsertLeave,BufWinEnter * syn match ErrorMsg " "
	au BufWinLeave * call clearmatches()  " avoids memory leak
augroup END

" Highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
	au!
	au VimEnter,WinEnter,BufWinEnter * setl cursorline
	au WinLeave * setl nocursorline
augroup END

if &diff
	" shortcuts for navigating next and previous diffs
	map ] ]c
	map [ [c
endif

" Ignore:

set wildignore=*.o,*.obj,*~
set wildignore+=*.aux,*.bbl,*.blg,*.log,*.out,*.pdf,*.toc
set wildignore+=*.acn,*.acr,*.alg,*.glg,*.glo,*.gls,*.glsdefs,*.ist,*.lof
set wildignore+=.git,.gitkeep
set wildignore+=.sass-cache/
set wildignore+=*.pyc,__pycache__/,*.egg,*.egg-info

" Completion:

set completeopt-=preview  " Disable completion preview

" Filetypes:

augroup FileTypeDetect
	au!
	au BufNewFile,BufRead *mutt-*         setl ft=mail
	au BufNewFile,BufRead *.md,*.markdown setl ft=markdown
	au BufNewFile,BufRead *.ui,*.page     setl ft=xml
	au BufNewFile,BufRead .coafile        setl ft=dosini
	au BufNewFile,BufRead *.qrc           setl ft=xml
	au BufNewFile,BufRead *.csv           setl ft=csv
augroup END

augroup FileTypeStyles
	au!
	au FileType c,cpp                     setl ts=4 sw=4 sts=4 noet noai cino+=g0 cc=73,80
	au FileType go                        setl cc=89
	au FileType vala                      setl cc=81,101 nolist
	au Filetype python                    setl ts=4 sw=4 sts=4 et nosi cc=79,89 list
	au FileType xml                       setl ts=2 sw=2 sts=2 et
	au FileType html,jinja,xhtml,xsd,ant  setl ts=2 sw=2 sts=2 et
	au FileType javascript                setl ts=2 sw=2 sts=2 et cc=79,89
	au FileType json                      setl ts=2 sw=2 sts=2 et
	au FileType config                    setl et
	au FileType markdown                  setl tw=79 et
	au FileType csv                       setl nowrap
augroup END

" File explorer
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25

" Functions:

fun! StripTrailingWhitespaces()
	let l=line('.')
	let c=col('.')
	%s/\s\+$//e
	call cursor(l, c)
endfun
nmap <silent> <leader>st :call StripTrailingWhitespaces()<cr>

fun! ToggleBackground()
	if (&background == 'dark')
		set background=light
	else
		set background=dark
	endif
endfun
map <leader>+ :call ToggleBackground()<cr>

fun! ToggleColorColumn()
	if (&cc == '')
		set cc=80
	else
		set cc=
	endif
endfun
nmap <leader>cc :call ToggleColorColumn()<cr>

" Key Sequences:

" Buffers
nmap <c-pageup> :bprev<cr>
nmap <c-pagedown> :bnext<cr>

" Make alt-combinations work in terminals
" See: http://stackoverflow.com/a/10216459
try
	let keys=['1', '2', '3', 'j', 'k']
	for k in keys
		exec "set <a-" . k . ">=\e" . k
		exec "imap \e" . k . " <a-" . k . ">"
	endfor
	set ttimeout ttimeoutlen=50
catch
	" Nothing
endtry

nmap <a-1> :bprev<cr>
nmap <a-2> :bnext<cr>
nmap <a-3> :buffers<cr>
nmap <leader><del> :bdelete<cr>
nmap <leader>df :bdelete!<cr>

" Move line of text up or down
nmap <a-j> mz:m+<cr>`z
nmap <a-k> mz:m-2<cr>`z
vmap <a-j> :m '>+<cr>`<my`>mzgv`yo`z
vmap <a-k> :m '<-2<cr>`>my`<mzgv`yo`z

" Move visual block up or down
" See: http://vimrcfu.com/snippet/77
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv
" Re-select visual block after indenting
" See: http://vimrcfu.com/snippet/14
vnoremap < <gv
vnoremap > >gv

" Search visually selected text with //
vnoremap // y/<c-r>"<cr>

" Sort visual block
xnoremap <leader>so :sort<cr>
xnoremap <leader>si :sort i<cr>

" Run make
map <leader>m :!make<cr>
map <leader>sm :silent make<cr>

" Toggle spelling
map <leader>ss :setlocal spell!<cr>

" Edit and source the vimrc file
map <leader>ve :e ~/.vim/vimrc<cr>
map <leader>vs :so ~/.vim/vimrc<cr>

" Disable pasting with middle mouse button
map  <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
map  <2-MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>
map  <3-MiddleMouse> <Nop>
imap <3-MiddleMouse> <Nop>
map  <4-MiddleMouse> <Nop>
imap <4-MiddleMouse> <Nop>

" Insert timestamps
nmap <f3> "=strftime("%FT%T%z")<cr>p
imap <f3> <cr>=strftime("%FT%T%z")<cr>

map <leader>l :set list!<cr>

" Put local configurations in this file
let $localfile=expand('~/.config/vim/local.vim')
if filereadable($localfile)
	source $localfile
endif
